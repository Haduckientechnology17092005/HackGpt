name: üè¢ Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly security scan

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Security Scanning
  security-scan:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install bandit safety semgrep
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run Semgrep Scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Code Quality
  code-quality:
    name: üìä Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install quality tools
      run: |
        pip install black flake8 mypy pylint pytest-cov
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: black --check --diff .
    
    - name: Run Flake8 linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy type checking
      run: mypy . --ignore-missing-imports || true
    
    - name: Run Pylint analysis
      run: pylint **/*.py --output-format=json > pylint-report.json || true
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: pylint-report.json

  # Testing
  test-suite:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=. --cov-report=xml --cov-report=html -v
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Docker Build
  docker-build:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      if: github.event_name != 'pull_request'
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: zehrasec/hackgpt-enterprise
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Testing
  performance-test:
    name: ‚ö° Performance Testing
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install performance tools
      run: |
        pip install locust memory-profiler
    
    - name: Run performance tests
      run: |
        # Add performance test commands here
        echo "Performance testing would run here"
    
    - name: Generate performance report
      run: |
        echo "Performance report generation would run here"

  # Enterprise Compliance Check
  compliance-check:
    name: üìã Compliance Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: OWASP Compliance Check
      run: |
        echo "OWASP compliance validation"
        # Add OWASP compliance checks
    
    - name: NIST Framework Check
      run: |
        echo "NIST framework compliance"
        # Add NIST compliance checks
    
    - name: Generate compliance report
      run: |
        echo "Compliance report generation"

  # Notification
  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite, docker-build, performance-test, compliance-check]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.security-scan.result == 'success' && needs.code-quality.result == 'success' && needs.test-suite.result == 'success' }}
      run: |
        echo "‚úÖ HackGPT Enterprise CI/CD completed successfully!"
        echo "üöÄ Ready for enterprise deployment"
    
    - name: Notify failure
      if: ${{ failure() }}
      run: |
        echo "‚ùå HackGPT Enterprise CI/CD failed"
        echo "üîç Check logs for issues"
